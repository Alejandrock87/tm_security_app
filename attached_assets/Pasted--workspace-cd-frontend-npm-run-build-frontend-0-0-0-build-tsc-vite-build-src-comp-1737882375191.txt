~/workspace$ cd frontend && npm run build

> frontend@0.0.0 build
> tsc && vite build

src/components/IncidentMap.tsx:59:9 - error TS6133: 'fetchData' is declared but its value is never read.

59   const fetchData = async () => {
           ~~~~~~~~~

src/components/IncidentMap.tsx:82:20 - error TS2345: Argument of type 'unknown[]' is not assignable to parameter of type 'SetStateAction<string[]>'.
  Type 'unknown[]' is not assignable to type 'string[]'.
    Type 'unknown' is not assignable to type 'string'.

82       setTroncales([...new Set(stationsData.map((s: Station) => s.troncal))]);
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

src/components/IncidentMap.tsx:138:9 - error TS6133: 'filterData' is declared but its value is never read.

138   const filterData = () => {
            ~~~~~~~~~~

src/components/IncidentMap.tsx:173:5 - error TS2552: Cannot find name 'stationsToUse'. Did you mean 'stationsToShow'?

173     stationsToUse.forEach(station => {
        ~~~~~~~~~~~~~

  src/components/IncidentMap.tsx:160:29
    160   const updateMapMarkers = (stationsToShow: Station[], incidentsToShow: Incident[], applyFilters = true) => {
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~
    'stationsToShow' is declared here.

src/components/IncidentMap.tsx:173:27 - error TS7006: Parameter 'station' implicitly has an 'any' type.

173     stationsToUse.forEach(station => {
                              ~~~~~~~

src/components/IncidentMap.tsx:174:32 - error TS2552: Cannot find name 'incidentsToUse'. Did you mean 'incidentsToShow'?

174       const stationIncidents = incidentsToUse.filter(i => i.nearest_station === station.nombre);
                                   ~~~~~~~~~~~~~~

  src/components/IncidentMap.tsx:160:56
    160   const updateMapMarkers = (stationsToShow: Station[], incidentsToShow: Incident[], applyFilters = true) => {
                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'incidentsToShow' is declared here.

src/components/IncidentMap.tsx:174:54 - error TS7006: Parameter 'i' implicitly has an 'any' type.

174       const stationIncidents = incidentsToUse.filter(i => i.nearest_station === station.nombre);
                                                         ~

src/components/IncidentMap.tsx:201:9 - error TS6133: 'loadIncidents' is declared but its value is never read.

201   const loadIncidents = async (currentFilters = {}) => {
            ~~~~~~~~~~~~~

src/components/IncidentMap.tsx:206:26 - error TS2339: Property 'troncal' does not exist on type '{}'.

206       if (currentFilters.troncal) {
                             ~~~~~~~

src/components/IncidentMap.tsx:207:54 - error TS2339: Property 'troncal' does not exist on type '{}'.

207         queryParams.append('troncal', currentFilters.troncal);
                                                         ~~~~~~~

src/components/IncidentMap.tsx:209:26 - error TS2339: Property 'station' does not exist on type '{}'.

209       if (currentFilters.station) {
                             ~~~~~~~

src/components/IncidentMap.tsx:210:54 - error TS2339: Property 'station' does not exist on type '{}'.

210         queryParams.append('station', currentFilters.station);
                                                         ~~~~~~~

src/components/IncidentMap.tsx:212:26 - error TS2339: Property 'incidentType' does not exist on type '{}'.

212       if (currentFilters.incidentType) {
                             ~~~~~~~~~~~~

src/components/IncidentMap.tsx:213:60 - error TS2339: Property 'incidentType' does not exist on type '{}'.

213         queryParams.append('incident_type', currentFilters.incidentType);
                                                               ~~~~~~~~~~~~

src/components/IncidentMap.tsx:215:26 - error TS2339: Property 'securityLevel' does not exist on type '{}'.

215       if (currentFilters.securityLevel) {
                             ~~~~~~~~~~~~~

src/components/IncidentMap.tsx:216:61 - error TS2339: Property 'securityLevel' does not exist on type '{}'.

216         queryParams.append('security_level', currentFilters.securityLevel);
                                                                ~~~~~~~~~~~~~

src/components/IncidentMap.tsx:231:32 - error TS7006: Parameter 'incidents' implicitly has an 'any' type.

231   const updateIncidentChart = (incidents) => {
                                   ~~~~~~~~~

src/components/IncidentMap.tsx:235:16 - error TS2339: Property 'incidentChart' does not exist on type 'Window & typeof globalThis'.

235     if (window.incidentChart) {
                   ~~~~~~~~~~~~~

src/components/IncidentMap.tsx:236:14 - error TS2339: Property 'incidentChart' does not exist on type 'Window & typeof globalThis'.

236       window.incidentChart.destroy();
                 ~~~~~~~~~~~~~

src/components/IncidentMap.tsx:240:23 - error TS7006: Parameter 'incident' implicitly has an 'any' type.

240     incidents.forEach(incident => {
                          ~~~~~~~~

src/components/IncidentMap.tsx:241:7 - error TS7053: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{}'.

241       incidentCounts[incident.incident_type] = (incidentCounts[incident.incident_type] || 0) + 1;
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

src/components/IncidentMap.tsx:241:49 - error TS7053: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{}'.

241       incidentCounts[incident.incident_type] = (incidentCounts[incident.incident_type] || 0) + 1;
                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

src/components/IncidentMap.tsx:244:12 - error TS2339: Property 'incidentChart' does not exist on type 'Window & typeof globalThis'.

244     window.incidentChart = new ChartJS(ctx, {
               ~~~~~~~~~~~~~

src/components/IncidentMap.tsx:244:40 - error TS2345: Argument of type 'HTMLElement' is not assignable to parameter of type 'ChartItem'.
  Type 'HTMLElement' is missing the following properties from type 'HTMLCanvasElement': height, width, captureStream, getContext, and 3 more.

244     window.incidentChart = new ChartJS(ctx, {
                                           ~~~

src/components/IncidentMap.tsx:272:9 - error TS6133: 'loadStations' is declared but its value is never read.

272   const loadStations = async () => {
            ~~~~~~~~~~~~

src/components/IncidentMap.tsx:306:22 - error TS2345: Argument of type 'unknown[]' is not assignable to parameter of type 'SetStateAction<string[]>'.
  Type 'unknown[]' is not assignable to type 'string[]'.
    Type 'unknown' is not assignable to type 'string'.

306         setTroncales([...new Set(stationsData.map((s: Station) => s.troncal))]);
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Found 26 errors in the same file, starting at: src/components/IncidentMap.tsx:59